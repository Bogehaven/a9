Prh-,c_\~ \~ 0 J NoL-\ C. Ba..i~r ~ J-1-':11.a.d--o~C..'-'ec~ ~ , , TCTL Model Checking Mr T p,.._~ <i_oot (1?~~ +O~ -f{7' 709 J Note that the resulting formulae are CTL formulae ( or could be understood as such) provided <I>does not contain intervals different from [O,oo). ■ In order to verify whether TA I=<I>for TCTL formula <I>.the above result suggests equipping TA with a clock for each subformula of <I>of the form '1iU1 w' while replacing this subformula as indicated in Theorem 9.37. This yields TCTLo formula <I>. As <I>does not contain timing parameters, and any clock constraint can be considered as an atomicproposition, in fact, ~ is a CTL formula! Verifying a timed CTL formula on a timed automaton TA thus reduces to checking a CTL formula on a TA extended with a clock whose sole purpose is to measure the elapse of time that is referred to in the formula. 9.3.2 Region Transition Systems Consider timed autornaton TA and TCTLo formula <I>. It is assumed that TA is equipped with an additional clock as explained in the previous section. The idea is impose an appropriate equivalence, denoted~, on the clock valuations and implicitly on the states of TS(TA) by letting {e',17')~ {e,r/} if e = e' and r1~ r/-such that: (A) Equivalent clock valuations should satisfy the same clock constraints that occur in TA and 4>: r1~r/ a::;, (rypg iff r/pgforallgEACC(TA)uACC(<I>)) where ACC(TA) and ACC(<I>)denote the set of atomic clock constraints that occur in TA and <I>,respectively. These constraints are either of the form x ~ c or x < c. (B) Time-divergent paths emanating from equivalent states should be "equivalent". This property guarantees that equivalent states satisfy the same path formulae. (C) The number of equivalence classes under~ is finite. In the sequel we adopt the following notation for clock values. Notation 9.39. Integral and Fractional Part of Real Numbers Let d E IR. The integral part of d is the largest integer that is at most d: ldJ = max{ c E IN Ic ~ d }. The fractional part of dis defined by Jrac(d) = d-ldJ. For example 1 ll7.59267J = 17, fmc(l7.59267) = 0.59267, l85J = 85, and fmc(85) = 0. ■ The definition of clock equivalence is based on three observations that successively lead to a refined notion of equivalence. Let us discuss these observations in detail. First observation. Consider atomic clock constraint g, and let 1Jbe a clock valuation (both over the set C of clocks with x E C). As g is an atomic clock constraint, g is either of the form x < c or .1;::;; c for c E IN. We have that 11 I=x < c whenever 17(x)< c, or equivalently, l11(x)J < c. The fractional part of 17(x)in this case is not relevant. Similarly, 1] I=x ::;;c whenever either l77(x)J< c, or l11(x)J= c and frac(x) = 0. Therefore,.,., I=g only depends on the integral part l7J(x)J, and the fact whether frac(1J(x)) = 0. This leads to the initial suggestion that clock valuations 17 and 1}1 are equivalent (denoted ~1) whenever lrJ(x)J = lr,'(x)J and frac(17(:i;))= 0 iff .fmc(r/(x)) = 0. (9.1) This constraint e11sures that equivalent clock valuations satisfy the clock constraint g provided g only contains atomic clock constraints of the form x < c or x ~ c. (In case one would restrict all atomic clock constraints to be strict, i.e., of the form :1: < c, the fractional parts would not be of importance and the second conjunct in the al.Jove equat_ion may be omitted.) Note that it is crucial for this observation that only natural number constants are permitted in the clock constraints. This equivalence notion is rather simple, leads to a denumerable {out still infinite) number of equivalence classes, but is too coarse. Example 9.40. A First Partitioning for Two Clocks To exemplify the kind of equivalence classes that one obtains, consider the set of clocks C = {:c, y }. The quotient space for C obtained by suggestion (9.1) is depicted in Figure 9.18) where the equivalence classes are • the corner points (q, p) • the line segments { (q,y) Ip< y < p+l} and { (:1:,p) Iq < x < q+l }, and • the content of the squares { (x, y) Iq < x < q+l I\ p <:ti< p+l} where p,q E IN and { (x,p) I q < :i: < q+l} is a shorthand for the set of all clock evaluations 17with r7(x)E ]q, q+l[ and r7(y)= p. Second observation. We demonstrate the fact that ~1 is too coarse by means of a small example. Consider location ewhose two outgoing transitions are guarded with x ~ 2 {action a) and y > l (action /3),respectively; see also Figure 9.19. Let state s = (£,77) with 1 < 17(x)< 2 and O< 17(y)< 1. Both transitions are disabled, so the only possibility is to let time advance. The transition that is enabled next depends on the ordering of the (x=3,y=2) , I  y  2<x<3 ,l<y<2  2  -~----+--- ..- 1  . _______________  1  2  3  X  --{?;= 3, 0 < y < 1) Figure 9.18: Initial partitioning for two clocks . y 2 t--+--+--+--+2 3 4 Figure 9.19: Fragment of timed automaton and time passage of two clock Yaluations. fractional parts of the clocks :randy: if fra,(11(.1:)) < frac(17(y)), then ,ais enabled before a; if frac(11(;r)) ~ /mc(17(y)), action o is enabled first. Time-divergent paths in s may thus start with a if frac(17(x)) ;:i:.frac(17(y)). and with {3otherwise. This is represented by the fact that delaying leads to distinct successor classes depending on the ordering of the fractional parts of clock, see Figure 9.19 (right part). Thus. besides l11(.i:)j and the fact whether frac(11(:r)) = 0. apparently the order of the fractional parts of 11(x) . .r EC is important as well, i.e., whether for :r, y EC: frac(17(x)) < frac(11(y)) or frac(11(x)) > fmc(17(y)) or frac(1J(x)) =frac(rJ(y)). This suggest:, extending the initial proposal (9.1) for all x,y EC by frac(17(x)) ~ fmc(1J(Y)) if and only if Jmc(r/(:r)) ~ frac(,,'(y)), (9.2) i.e.. 111:;2 112 iff '71 :;1 112and (9.2) holds. This strengthening will ensure that equivalent states (e.17) and ([, 171) have similar time-divergent paths. !J / iP.1 I • ◄-------1-=-·-:i< ,l < l. l < y < 2 . .l' -_11 . .. .,. ~;I,~. .1· ~ :3<--.,· < ~-l , .J<, :Lr -JI , 2 .,I f· u~.-• E.m11q1h Y.41. A Semwl Pa-rlit.ioninq for Two Clocks Thi~ observation suggests to dccornposc the sqw1rns { (:1:, y) I q < :1: < c1+1 /\ J>< .lJ < p+·1 } into a liue segtne11l. ;111 upper aud lmn:r trin11glc, i.e., t.lte followiug three parts: { (:1:,.IJ) I (f < :r < q+I I\ fl < !J < f)+ l I\ :c-y < q-p }, { (:,:.y) I q < :r < q+l I\ /I< .lJ< p+l I\ :1:-y > q-p }. nnd { (:1:,y) I (J < :1;< q+I I\ fl< !J < p+l I\ :1:-.11= r,-,, }. Figure 9.:20 illustrates lhc rcsult.i11g p~rtitiouiug for two clocks. • Pinal observation. The above const-rai11ts 011 clock equivalence yi<0 ld a den1.111wrnble though not fiuit.e quotie11t.. To obtain n11 equivalence witl, a fin.it<~quotient.. we exploit. the fa(;t t.hnt. in order t.o dec:idc whetber TA I=<I>only tlw dock co11strai11ts occmri11µ; iu 1:4 xml <l> are relevant.. As t,here are 011ly finitely mauy clock cow,tn-,iuts, we cau det.erllline for each clock :t EC' the 111axi111alclock const.rnint, c:,: E IN, say, with which :i: is co111pmed in some dock co11strai11t in eiLhcr Ti\ (as guard or locM.iou inv,1rinnt.) or <D. Si11cc C:1: is the largest constant with which clock :c is cotnparcd it. follows that if 11(:,;)> G:r:, t.lte act.11al vc"due of :i: is irrelcrn11t. (Clock :,; I.hat occms neither iu TA 11or in <I> is snpertl11011:, Hnd can be omittC'd: for these clocks WC' S<'t c_,.= 0.) As 11<·011seq11e11cc1.tlw coustrai11t.s (!J.1) me 011ly rck'vaut if 11(.r)<_,;:c, and q'(.r) ~ (·,.. while~ for (D.2) i11 additio11 11(y) ::;; <.:y a11d 1/'(!J)::;;Cy· The above• eo11sideratio11s sugg<'st tlte following uotiou or clock equivalence. TCTL Model Checking y 1 2 3 4 Figure 9.21: Third (and final) partitioning for two clocks (for Cx= 4 and Cy= 2). Definition 9.42. Clock Equivalence ~ Let TA be a timed automaton: 4>a TCTLo formula (both over set C of clocks), and ex the largest constant with which x E C is compared with in either TA or 4>.Clock valuations r,, r,' E EvaJ(C) are clock-equivalent, denoted r1~ r/ if and only if either • for any x EC it holds that 17(x)> Cx and 171(x) > Cx, or • for any x, y EC with r,(x), 171(x) ~ ex and rJ(y),171(y) ~ Cy all the following conditions hold: -L17(x)J= li7'(x)J and Jrac(TJ(x)) = 0 iff Jrac(171(x)) = 0, -Jrac(ry(x)) ~ frac(TJ(Y)) iff frac(r,'(x)) ~ frac(r/(y)). • As the clock equivalence~ depends on TA and <I>,strictly speaking one should write ~TA,4> instead of~-The dependency of~ on TA and <Pis limited to the largest constants ex; that is to say, neither the structure of TA nor that of cI>is of relevance to clock equivalence. The equivalence~ is lifted to states of the transition system TS(TA) as follows. For states Si = (€i,'T/i),i = 1, 2: in TS(TA): Equivalence classes under ~ are called clock regions. Definition 9.43. Clock and State Region Let Sa: be c1 clo(:k equivalence on C. The dock region or ,, E En-1/(( ). d<-'110tC'Cl[,,]: 1:,, defined l>y 1 1[,,J= { 1J E Eval{C) I 17Sa:IJ }. The :;talc rc_qio-n of s == (( rJ)E TS(TA), denoted [8]:i::;ddh1ed by I! In t.!te sequel, st,tte ,rnd clock regions an~ oft.e11 iudicatcd ns regions \\'hcu0.vcr it is dcm frorn t.lw rnutext. what. is rne,1111. Clock regions will be denoted hy r, r'. nnd so forth. We oft.cu w;e casual uotations to <h~11ote clock regions or clock valtwtious. For a timed n11to111at.011with two clock::;, :r and .1Js,w, { ( :r, y) 1 < :i: < :2,o< y < L:1:-ii < 1 } de11otes t.he dock regio11 of all dock valuations 17 E Eva/( { :1:,y } ) with I < r1(:1:)< 1. and O < r7(y) < 1 aml fmr:(11(:c))< .fm<:(,,(y)). E:i:amplr 9.44. Light Switch Consider the t;illled automaton over C = { :1:} ror t.lie light swit.clt and the TCTLo fornHtla <I>= true. It follows that. the largest constant. with which :t is c:01uparcd is c,.-= 2; tliis is due to the locnt.icm i11vmiant :i; ~ 2. .1: ~ l 8ldlr:h _o.ff' switc/t_on ,-e;;ef. ( :,: ) W~! gradually com;truct t.hc regious for this timed nuto1w1.tou b:v considliriug each of the constraints in Definition 9.42 separaldy. Clock valu,ttions IJ.r,' ,l.r(' equivalent if 11(.r) a11d ·1/(:1:)h<'loug to the sauw equivalence class along t.hC' real tin<'. (In geueral, for n clocks this arno1u1ts to considering an 11-dime11sional hyperspace on IR-:,.o,) 1. Tll<' rC'qnirement 1'.hctt·11(.r)> 2 and IJ'(:,;)> 2 or q(.r) ~ 2 and ,7'(:1:)~ '.2yields th<" partitioniug into the intervals [O, 2] aud (2, ex;,). 