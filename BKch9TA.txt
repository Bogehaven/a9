p~V\c.~pl~ Cviec,,h-~ "'~ C '-" ""~ \.J Ge.;~r)os:t-P1'~ ~tfT r~s LOO~ p~~~ G'71-G·9g Chapter 9 Timed Automata The logics we haV<' Pnconntcrecl so far an• interpreted over transition systems that desc.riue how a reactive syst.em may evolve from one state to another, Timing aspects an•, however. not covered. That is, indications are given neither about th(• residence time of a state nor about the possihilit_v of taking a transition withi11 a particular time interval. However. reactive systems such as device drivers, coffee machines, comm1mication protocols, and automatic teller machines, to mention a few, must. react. in time they are t-ime-crilical. The behavior of time-critical systems is typically subject. to rather stringent timing constraints. For a train crossing it is essential that on det.e{'ting the approach of a train, the gate is dosed within a certain tiin<-' bound in order to halt car and pedestrian traffic before the train reaches the crossing. For a radiation machine the time period during which a cancer patient is sHbjectecl to a, high dose of radiation is extremely important; a smnll extension of this period is dangerous and can <:ause the µatient's death. To put it. in a nutshell: CmTcctness ·in limc-c1'ilical systems not only depend:; on the logir.al result (~/' the computation but also on the time at which the results an~ produced. As timeli11ess is of vital importance to reactive systems, it is essential that the timing constraints of the system are guaranteed to be met. Checking whether timing co11straint.s are met is the subject of this dmpter. In order t.o express such timing com;traiuts, the strategy will be t.o extend logical formalisms that allow expression of the ordering of events, with a notion of quantitative time. Sud1 extensions allow expression of timiug eonstraints such as: "The traffic light will turn green within the next 30 seconds.'' 673 Timed Automata A first choice to be ma.de is the time donrnin: is it discrete or continuous? A discrete time domain is conceptually simple. Transition systems are used to tnoclel timed systems where each action is assumed to last for a single time unit. ~fore ge11eral delays can be modeled by using a dedicated unobservable action. T (for tick), say. The fact that action a lasts k > 1 time units may be modeled by k-1 tick actions followed (or preceded) by Cl'. This approach typically leads to very large transition systems. Note that ht such models the minimal time cliffere11ce between any pair of actions is a multiple of an ,, priori, fixed, time unit. For synchronous systems. for instance, in which the involve(] processes proceed in a lockstep fashion, discrete time domains are appropriate: 011e time,, unit correspo11cls to 011e dock pulse. In this setting. traditional temporal logics can be used to express timing constraints. The next-step operator can be 11sed to "measure" the.> discrete elapse of time, i.e., 0 <I>nH~an::;that (f> holds c'l.fter exactly one time unit. By defining Ok+ 1 <I>= Ok (O <I>)and O O <I>= <I>,genernl timing constraints can be specified. Usi11g the shorthaud ◊~k <I>= O O <I>V O <I>V . . . V Ok <I>,the above informally st.at.eel timing constrai11t on the traffic light may be cxprc::;sed a:; D (red =:, ◊~:m green). For syuchronous syste111s, tra.usition sy:;terns and logics snch c1s LTL or CTL can be used to express timing co11straints, and t.rnditional modd checking algorithms snfficc. In this monograph we do not want to restrict omselves to synchronous systems, aud will consider--as in Newtonian physics time of a. c.:onti1111ous nature. That is to say, the nonnegative real nm11bers (the set IR~o)will be use<l as time domain. A main advantage b that there is no need to fix a minimal time unit in advance as a continuous time model is invariant against changes of the time scale. This is n10rc adcqnate for asynchronow; systems, such as distributed systems, in which components may proceed at distinct speeds, aud is more an intuitive than a discrete time model. Transition :;ystem representations of asynchronous systems without additional timing information are indeed too abstract t<, adequately model timing co11strai11ts,as illustrated by the following example. Example 9.1. A Railroad Crossing Consider a railroad crossing, as disc11ssed i11 Example 2.30 (page 51), sec the schemati,· representatiou in Figure 9.1. ror this railroad crossing a control system needs to b,, developed that dose:; the gate on receipt. of a signal indicating that a trai11 is approachiug a.nd ouly opens the gate once the train has signaled that it entirely no::;sed the road. Tl«· safety property that should be established by the control system is that the gates ar<:' always closed when the train is nossiug the road. The complete system consists of thi:' three components: Train, Gate, mid Controller: Train II Gate II Controller. Figure 9.1: Railrond crossing (ti111e abstract). Tr1tin Conlrolhr Gate Figmc 9.2: Transitiou systems for process<>sTrain ([c,ft), Contrnller (midd!P). and Gale (right). Recall tha.t actions commou to a pair of proce::;ses need to be performed jointly, while• other actions a.re perfon11ed a.utonomom;ly. The transit.ion syste111s of these processes arc depicted in Figure 9.2. It follows that the composite system Train II Gate II Contrvlle1· does uot guarantee tha.t the gate is closed when the train is passing the crossing. This can c•asily he see11 by iuspecti11g an initial fragment of the composite transition system; see Figmc 9.:J it rannot be deduced from the tra.nsitiou system whether, aft.t!r sending the ··approach'' sigual, the train reaches the road before or after the gate has been dosed. Under the assumption. thungh, that the train docs not cxc·c•cd a certai11 maximum speed. a lower hound for the dmatiou between t.hc signal '·<tpproach·' and the time iustant at which the train lrns reached the crossiug can b<:>indic.:atPcl.SC'C Figure D.4. Let. us assume that the trni11 needs more tha11 2 minutes to reach the crossing nfter emission of t.hc "approach'' signal. AcC"ordingly. timing nssumptio11s arc made for the controlli•r and the gate. On receiving the ·'approach" signal, after exactly 1 minute the· cont.roller will signal the gate to be lowered. The actual closing of the gate is assumed not to exC't'ed a minute. The hranchi11g in global state (near, l, up) can now be labeled with timing information: (far, 0, up) fLl'J)IV(tCh (nell1', 1, up) lower enlcr (near, 2, down) (in, 1, 1q1) Figur<' f.U: Initial fragrn<'nt uf the trnn:,itio11 syst~!111 Tmi,i II Cunlrnlfor II Gale. 11/Jf)l'l)(J.dl. low<'r m1sr approach -fnr e,;t, ( delay of execution ti11w 1 minute of~ 1 minute Figur<' !)A: The Train (left). Co-ntrolle·r (middle), and Gale (right) with timit1g as:;uw,,tion:;. G near 2 down a roach far O up in I up The train can onl.v execute the locnl stnt0 change near <J,,tt~ in c1fler more thau 2 mi11utes. On the other hand. the gat<! is dosed at most 2 1t1i1111tes..'lfter receiving the .. approach'" signal. Therdore. th<' global stat<:' chaHge entcr ( • l )(-near. I. ·up ~ 1.n. . 11.p> n<'ver occ1m;. Tims. tlw gate is always dosed before the train readies th<) crossi11g. The faC't t.hat the ga.t.e remai11s closed a& long ,,s t.he trnin is 011 t.lw crossing is e11smed by the fact that action raise can ouly happen after th<' trnili has indicated e:1:it. ■ As a modeling fornwlism for timc-criticc1l syst.eirn,. the Hot.ion of limed o.ntmnata. has heeu developed, all extension oftrausition systems (in fact, program graphs) with duck variables that measme the elapse of time. This model includes means to impose constraints on the resideuce times of states, and on the timing of a('tions. 9.1 Timed Automata Timed a11tornatn model the behavior of time-critical systems. A timed automB.tou is in fact a program graph that is equipped with n finite s<'t of real-val11ed clock variables, called clucks for short. In the sequel w<• assume that the set of clocks is denumernhl0. a11d we will use x. y, and z as clocks. Clocks are <liffereut from the usual variables, as their access is limited: docks may only be inspected, and reset to zero. Clocks ca11 be reset. to ·wro aftc'r which they start increasing their value implicitly as time progresses. All clocks proceed al rate one, i.e., after the elapse of d tim<" units, all clocks advance by d. The ,value of a clock thus denotes th<• amount. of time that has bee11 elapsed since its last reset. Clocks can int.uitivdy IH-·<·ow-;idered as stopwatches that can be started aud <'hecked iu<lepeudeHtly of oue another. Conditions on the values of the clocks are used as enabling couditions (i.e .. guards) of actions: only if the condition is fulfilled is the action enabled nnd cap,1.ble of being takf·n: otherwise, the action is disabled. Conditions which depend on clock values arc called dock wnstraints. For the sake of simplicity; it is assumed that cnabliug con<litious only depend on clocks and not on other <lata variables. Clock coustrnius arc also used to limit. the amount of time that 1nny be ::;peut i11 a location. The following definitiou prescribes how constraints over clocks are to be defined. Definition 9.2. Clock Constraint A dock constrnint over ::;ct C of clocks is for med according to the grarn111c,u· .I.J::= _,.< (; I ;J; ~ (· I :,; > r, I J; ~ ('. I _qI\ _(J where c E N and a: E C. Let CC(C) deuote the set of clod~ co11strc1i11tsover C'. Clock constrnints thM do not, contai11 ally c0Hj1111ctiollsme atomic'. Let. ACC(C) denot,the set of all atomic-clock constrai11ts over C. ., Clock constraints arc often written in abbrevin.t-cd form, e.g., (:c ~ c 1) /\ (:1:< <:2) may hahhr<'viat.cd by :1: E [ci,c2) or c1 ~ :i: < c:2, Glock difference constraints si1ch as :1:-y < ,· nm lw added nt t.hc expcns<' or a slightly more iuvolved theory. For simplicity, they rn.--.. omit.te<l here and we restrict the discussion to atomic clock constraints that compare · dock with a constant c E N. The decidability of the model-checking problem is not affccl.e(\ if c is allowed to be rational. In this casf' tlw rationals in each formula can be couverted iuto natural numbers by suiLable scaliug. In geueral, we can multiply each constant by the, least common nrnltiple of denominators of all co11sta11ts appearing in all clock constraints. Int11itiv<-ly,n timed automaton is a (i;lightly modified) program grnph, whose varial>les ar,.' clocks. The clocks arc used to formulate the real-t,ime assumptions 011 i;ystcm behavior. An edge i11~l timed automaton is labeled wilh a guar<l ( whe11 is iL allowed to take ,u, edge'?). an action (what b performed when Laking the edge'?), nncl a set of clocks (whi<:li clocks arc to be reset'!). A location is equipped with an invariaut tha.t constrains the amount of time that may he spent i11 that location. The formal dt>finit.ion is: Definition 9.3. Timed Automaton A timed automaton is a tuple T.4 = (Lo('. Act. C. ~, Loc0, hlv, AP. L) where • Loe is a finite set of locations, , • Loco ,;;;;Lo<' is a set of initial localions. • Act is a finite set of act.ioni;, • C is a finite ::;et of doeks, o c...-, ~ Loe x C'C(C')x Act x 2c x Loe is a t.ransition n•lation. • /nu: Loe---,. CC(C) is n11 i11vari<1.nt-c1ssign111e11t: fu11ctio11. • AP is a tiuite set of atomic propositions. and • L : Loe -2AP is a labeling function for the locatio11s. ACC(TA) denotes the set of alolllic dock constraints that occur in eitlier H guard or a locntio11 iuvariant of TA. ■ A timed nut.0111atou is a µrogram graph with a finite set C of clocks. Edges are labeled wit.h tnplcs (_r1,n, lJ) where y is a clock c;onstrnint 011 tl1e clocks of the tirned f1uto111<1tcrn. • t· I D c C' • f 1 I 'fl • • • • • t· f' !r<,. D f' •o-1s au ,1c 1011, cUJ< _ 1s a s<-'t o <·oc<S. • 1e mt111t.1ve 111tcrprctntwn o • '---' • 1s that the timed mitonrnt.on Utll lllOW from loc:1:,tion( t.o locat.iou (' when cloc:k (:011:,;traiut g holds. Besides, when moving from localiou Cto t', nny clock in D will be reset. to zero and actiou o is performed. F11uc:tiouInv Hssigns to each location ;-1 location i11variant thfl.l spec-ities how loug t.lw timed auton1atoll llHlY stny there. For location l, lni:( () constrains the amouut of time t·hat may he spent in (. That is to say, the locntio11 ( shonld be left before the invariant ln:u(l') becomes iuvali<l. If this is not possihlt>-a::, there is no outgoi11g transitio11 cnablccl--no furtlwr progress is possible. f11 the formal semantic-; of timNI automata (set> Definition 9.11) this situatio11 cauoes time progr<'ss to halt. As time progress is no lo11ger possible, this sitnatiou is also k11uw11as ;-).tim.elud:. This ph<~nomenon will be discussed in more detail later. The function L has tht> same role as for trn11sition systems and as~ociates to any locatio11 the set of atomic propositions tlrnt arc valid in that lo<.:atiou. Before c-011sidcringl he precise interpretation of t irned autolllata, we give some simple examples. For depicting timed autorn,,ta we adopt. the drawing conventions for program graphs. lnvariauts ar<~ indicated inside locatious and arc omitted when they equal true. Edges are labeled with t.he guard, the action, and thf' s<'t of docks to he reset. Empty :-;et.s of docks are often omitted. The same applies to clock co11str<1inU-;t.hat. are co11stautly true. The resettiug of set D of docks is sometimes indicated by resel(D). If t:he actions are irrelevant, they an'. omitted. &wmple 9.4. Guards vs. Location Invariants Figure 9.5(a) depicts a simple timed antomaton with 01w clock :c and one location (' equipped with a self-loop. The self-loop cau be takeu if clock :i: has at least the value 2. and when being taken, clock :i:is reset. Initially. by default clock :c has the v,1lue 0. 680 'i' l·~1lt1t> or,. -l 1' valrn· of .r· Figure 9.5: Some timed automata with a siugle clock and 0110 of their evolutions. Figure 9.5(b) gives an example of an execut.ion of this timed automaton, by depicting th,.., value of clock ..t vs. the elapsed time since the start of the automaton. Each tim<' the clock is reset to 0. the automaton traverses the self-loop at locatiou e.As In11(€) = true. tinv· can progress without while residing in e.In particular,any rE>A-;trictio11 a legal ht>havior ,,, this automaton is to stay in location f ad iufinitum. Formally, trne:.1=~2,{,c} ....---3s>Loe = Loco = {e}. C = { .t}. e f. and /n11( t') = true . Labelings and actions are omitted. ---, ap lo1m:r coming J.uw11{up} 0true .i.: (; lreset(:,;) :i; ~ l goiny up mise down0 {down}:i: (; 2 tn1.f:m~ct(:1:) Figme 9.G: Timed automaton for the Gate. Clrnngiug the timed ant.ornat.ou of Figmc ~l.5(a) :;lightly by incorporat.iug a locat,ioll iuvari<lllt :r; ~ 3 in loc:atio11( leads to the effect that :1: cai111otJ)l'O!,?;l'CS8 unboundedly auyrnorc. Rather, if ;1;;?: 2 (guard) aud :t ~ ;{ ( iuvariant) the outgoiug trnnsition 11111st.lw taken. Note lha.t it i:; not specified at which time irn;tant in the interval [2, 3] the transition i:; takcu, i.e., Lhb is determined 110Hdetnrministi<.:ally. The timed nnto11rnto11 nud nil example of its behavior are ill11st.ratcd iu Fignre 0.5(c) aud (d), respectively. Ohscrvc thal the sa111e effect is 110t obtained wheu strengthening the guard iu Figure 9.5(a) iuto 2 ~ :1:~ ;{ while keeping !nu( C) = trnc. T n that. case, the 011tgoing transition ca1t only be taken when 2 (; :1; (; :3-Hs itt the prcivio11s s<:cnario·--but is not forced to be takeu, i.e., it: cm1 simply be ignored by letting time pass while staying itt C. Thi:; i1> illttst.rated in Figure 9 .. 5(e) nnd (f). Put i11 a 1mtshcll, inw1riants are the only uieam; to force trausiLion:-; to be taken. ■ E:i:ample .9.5. Timed Automaton for lhe C:atf~ Consider the gate for the railroad crossing (see Exampl0 0.1, page 674). Assuming that lowering the gate takes al. most a siuglc time uniL, all(! rai1>ing the gate lakes at least on(' aud at most t.wo time 1111it8,the timed automaton for process Gate is t:?;ivcn as in Figure 0.G. \Ve have Act,= { lower, mise} and Loe = { up, cominqdown, do11m. _qoingup } with Loco= {up}. The trausitions of tlie timed automaton arc up com.htgdO'lon coming down down ll uc: ,..,_,,.. , .. { ;,: } ;.t· > I· T 0down goin_qv.p goingup c:; • • > upr The location coming down with invariant .i; ~ 1 has hc<'n added to model that the maximal delay betwecu tbc occ1trrem:f> of a<"tion lower aud the drn.ng~ to location down is at. most lime ir,8/.. time in.st. .'}Olllfl 11 fl ;3_7 ~ -5.0971 Iin)f! inst. :raisf! 2.172-........,---~'down time i11s/. i r--r:0111iny clo(('11 LH8~ 1 :lower :lowe,· --~ 0 1 2 5 G T Figure 9.7: Location dingram for tlH' t.imcd m1t.O11wlonGal<~. a siugle tirn<' 1111it'. C'lock .r is set to zero 011 th(' occ111-re11c·t-'ul' a<'tion lowt:F a11d tl111-. "rncnsur<!:•t the dapsc of t.i111e since t.hnt. occtttT<'ncc. By restridin?; the residence t.ime or comin_q down to :t: ( L the switch to down 111t1sl b<' made within one ti111e nnit.. Note l..hn.i• this wonld not have beeu csl..ahlished by ltnvi11g 11 dired edg<' between lo<:atiuus up 1111<1 down with gumd :r.: ( 1, ns tlw v,ll11e or :r wo11ld not refer to th~, ti111e of' occ111T<mce of lowr-:1'. In a similar w,w,the purpose of location _qoingupwith invarim1l .r ~ 2 is to model tlmr rnising t.he ~<1te takes at. most two time nnit.s. In I he initial location 11.p, 110 constraints ,m, imposed on t.he rcsideuce lillle. i.e., lnrl(-up) = tnK'. The same applies to locat.io11 dow11. Let AP= {up, down} with the labdiug; fuHction L(up) = {up}, L(down) = {down}, mtil L(comingdown) = L(goinyup) 0. ~ Remm·/,;, 9.6. Location Diagrn.m Every huite behavior of a timed a11to111aton c:au be represc11ted by a location rliaymm. Thb depicts for <•very time im;tant up to som<' a priori fixc'd 11pper bound. the localion of tl1\' timed auto1mtton during that behavior. For Lhe tinwd m1tomaton of the Gale a possil;[,, real-t.itue behavior is i11dicatcd by the location diagra111 i11 F'igmc 0.7. ta Parallel Composition of Timed Automata For modeli11g complt>x syste111s it is C'<•Ive11ie11t to allow paralk.,l composition of tirnC'd ,rnlo111ata. This allows fur the llloddiil;; of tillle-crit.ical systems in a compositional rnauner. \Ve considc~r a parallel compositi<:.111 operator. denoted IIH,that is para111eterizcd with a set. of horul::;/wking actions H. Thb operator is sirnilar in spirit to the corresponding operator on transition systems; sec Definition 2.26. page 48: actions in H need t.o be performed jointly by both involved tim,,.d I ' --------------------------------G83 automata.  wht•rea~ ,Ktions out.side H  are  pcrfornwd  a11to11omo11slyiu an  iuterleavcd  fash ion.  Definition  9.7.  Handshaking  for Timed  Automata  L<'t TA.; = (Lo<:;, Acti, Ci. c.......;,Loc0_;.Inv;, AP;. L;). i = l. 2 he timed a11to111ata with fl~ .,\ct., n A.<:t2, C1 n C2 = 0 and A.Pi ri AP1 = 0. The timed a11tomnto11 T/\1 llnTA2 is defined as where L( (('t. f2)) = L 1 { ei)UL2( €2) ,111dlnu( (C1, f..J) = lnu1 ( Ci)l\luv2 (€2)-The transitiou rt•lat:io11'-----is defiued by the following mies: • for u E fl: • for o· ~ fl: y:o-,l)!t=et,/J l f1 I e', f.2 2 e'2 Hild fJ:e>..D y:a.U(e,.e2) (l'~, e2) (f I ,C-2) (e,.f~} • The lorntio11 i11varia11t of a composite loc-atio11 is simply tht> conjunction of the location invariants or its constit11e11ts. For <l E H, the transition in the resulting timed automn.t.011 is guarded by tlw <·onj1111('tio11 of the individualoft.he guards tirned aut..oma.ta. This <>ntails that an action in II can only be taken when it. is enabled in bot,h t.imed automata. Besides. thf' clocks that are reset in the individual automata are a!l reset. As for transition systems. Ll1<'operat,or !11-1is associative for a fixed set. fl. Let TA1 IIHTA2 llu ... IITAn denote t,ht> J>cuallel composition of timed automata TA I through TA,, where H ~ A.c:t1 n ... n Acl,,, assuming that. all t.imecl automata are compatible, i.e., ea('h pair of TAi and 1)\.i, i -=fj have disjoint sets of atomic proposition!-> and disjoint. clocks. E .. wmplc 9.8. Rail.,-on.dOros.sing Consider agai11 the railroad crossiug example. \Ve extend the timed automaton for thf' gate (see Example 9.5) with t.imed automata for the cont.roller and the train. The complete system is then given by (Train11HI Conlrollr:1·)IIH2 Gate Timed Automata i Tmin Cor1lrolle1· Figure 9.8: Timed automata. for the train and the controller . where H1 = { approach, e:ril} a11clfl2 = { lower, rats(,}. Let us assurne that the train signals its approaching of the gate at least two time units before it enters the railroad crossing. Besides, it is assumed that the train h,1s Hufficieut. speed such that it leaves the crossing five time units after approaching it, ,,t. t.he latest .. The timed antoma.to11 for the Train is depicted in Figure 9.8 (left). 011 approaching tlw gate, clock y is set to zero, and only if y > 2 is the trai11 allowed to enter t.he crossing. The Controller is depicted in Figure 9.8 (right) and is forced to seud the signal "lower'' (t.o the Gate) exactly after 011c time unit aft.er the Train has signaled its approaching. Figure 9.9 shows the composite timed automaton. The prefix of n possibl<> hehavior of t:lw complete system is sketched iu the location diagram in Figure 9.10. Note that this timed automaton contains the location (in, 1, 1tp). In this location. the train is at the crossing while the gate it. still open. However, t.his location turns out to lw unreachable. It can only be reached wheu y > 2, but as y and z are reset at the saul<' time (on entrance of the preceding location), y > 2 implies z > 2, which is impossible du<· to the locatiou invariant  z  ~  l.  ■  9.1.1  Semantics  The previous exa.mples suggest that  the state  of a timed automaton  is determined  by its  current location and the current values of all its clocks. In fact, any timed automaton canlike program graphs be interpreted as a transition system. Due to the continuous tinH' domain, these underlying transition systems have infinitely many states (even uncountably m:ise resd(:r) (/1t1',0,yoi11r1,q,) :t ( 2 <lJl[IHJ<tch re.,et(y. z) , (near.l.9oi119 ·1'11) ' _I/ ( 5 II ~; ( 2 II z ( I enter !/ > 2 ,,. ;;:;: I C ---------, (-in,1,/JOillf! llJJ) !L§ 5 A .c ,s;2 /I :; ,.; l Figm<' 9.9: The t.imcd nutomat.011 ( 7hr.inllH, Controller)ll1h Gate. going up down coming down up 2 () in near for 0 2 3 4 5 <, Figure 9.10: Location diagram for n behavior of (Tminllr11 Contmll<-'r)llthGfltc. many): and arc infinitely branching. Timed automata Cl4.ll thus lw c:om;irtered as finit:(: descriptions of infinite transition systems. The underlying tnu1sitio11 system of a timed automaton results from unfolding. Its state:; consist of a control componeut, i.e., a locatio1,. eof the timed automaton, together with a valuation IJof t.hc clocks. States are thus pai1· of the form (e,11).Let us first consider dock valuations. Definition  9.9.  Clock  Valuation  A clor:k valuation 1Jfor a set C of docks  is a function  ,, : C ---.iR~o, assigning to each clocl.  x EC  its cmrent  value ·ry(.r).  u  Let Eva/(C) denote the set of all clock valuations over C. In the following, we ofte11 us,:, notations like [.r = v, y = v'] to denote the clock t>valnation ,, E Eva/( {x. y}) wit.h11(:i:)= 1· and ,,,(:v)= v'. 'vVe can 110w formally define what it means for a dock constraint. to hold for a clod~ valuation or not. This is done in a similar way as charac;terizi11g the semantics of a tempon logic, namely by defining a satisfadion rdatio11. l11 this case the satisfac:tion relation is a relation between clock valuations (over a set of clocks C) and clock constraints (ow,· C). Definition 9.10. Satisfaction Relation for Clock Constrnints For scl G'of doC'ks . .r EC, 11E Enil(C). (·EN. Hild .r;.y' E CC'(C): let F~ En1/(C)x CC(C) be defined l.>y q I=lrue 11 F :r < (: iffr1(:r) < (· I/ F ;/; :( (' iff 17(:r) :( c IJ I= -, f.J iff 1/~ fl 11F fl I\ y' iff 1/ f=f.} I\ IJ f=!!' • Let 11be a dock rnl11nLio11(>11 ('. For posit.i\·c rc,ll r/. 11+d denotes the dock ,·aluation wltcn· all docks of 11arc in<T0,1sed by d. Forntally, (17+d)(.1·) = 11(:1.:)+ d for all docks :r E r. reset .i: in 11dt•11otes th<' clock v,tlunlion whid1 is <'q1wl Lo ,, cxccp(· that clock .1· reset". Fnrnwlly: 1/(!J) if y =/:-.r( reset :i.: in ,, )(y) { 0 if y = :l'. For t.hc clock valnatio11 '7 = [x = r.,.11= 4], val11atio1111+9 = [.r = 11➔ D.y = 1:3], and reset :1: in (11+9) = [.r = 0, y = lJ]. Nested oce11rrc·•11c<'sof reset are typically abbrcviatt•d. For iustanr.c, reset :r in ( reset !f in 17) is denoted reset .r. !/ in ·,,. Tlwrc c1re Lwo possihl<• ways in whicl1 a timed automaton can proceed: by taki11g a trnu!-Jition in the limed autumato11, or by Jetting time progress whil<• staying in 8 locat io11. In tlie uuderlying tra.usition system, tlw forn,cr is rcprese11ted by a diM-rr:l(' trn11sitio11 and the lcttter by a delay transition. 111the former c-ase. tlw corresponding lrausitiou of tlw 111Hhirlyi11gtransitio11 system is labeled with the actiou of tlw transition i11 lhe timed automaton: iu the latter case, it i:-;lah<•h\ wit Ii ,l positive n·al 1111111hcr indicating the nmount or time that lias <•lapsed. Definition 9.11. 'Iransition System Semantics of a Timed Automaton Ld TA = (Loe, Act, C, '-, Loco, hw. AP. L) he a timed a11tornato11. The transition system TS(TA) = (8. Ad, ........I, AP', L) wit.It: • 8 = Loe x Eva/(C) • I= { (eo,11)I to E Loco I\ 11(:r)= 0 for all :1; EC'} • AP'= AP u ACC(C) Timed Automat;:1 • L'((e,TJ)) = L(e) u { g E ACC(C) Ir1F g} • the transition relation --+ is defined by the following two rules: discrete transition: {e, ·ry) ~ {e', TJ') if the following conditions hold: (a) there is a transition f, g~D f' in TA (b) T/I=g (c) TJ1 = reset D in 17 (d) r]'I=Inv(€') delay transition: (£,TJ)....i..,(e, ry+d) ford E ~~o (e) if 17+dF lnv(e) For a transition that corresponds to (a) traversing a transition e9~D e'in the timed automaton TA it must hold that (b) 17satisfies the clock constraint g (ensuring the transition is enabled), and (c) the new clock valuation r/ is obtained by resetting all clocks D in T/should (d) satisfy the location invariant of e'(otherwise it is not allowed to be in £'). Idling in a location (second clause) for some non-negative amount of time is allowed (e) if the location invariant remains true while time progresses. For state (f, TJ) such thnt TJF Inv(£), there are typically uncountably many outgoing delay transitions of the form (e,TJ) --4.... as d can be selected from a continuous domain. Example 9.12. Light Switch The timed automaton Switch in Figure 9.11 models a switch that controls a light. When off, the switch may be turned on at any time instant. The user may switch off the light at least one time unit after the most recent time the light was switched on. After two timf' units the light automatically switches off. Clock x is used to keep track of the delay since the last time the light has been switched on. (The timed automaton does not distinguish between the switch_off action activated by the user and by the light. This could be mack• explicit by adding an edge from location on to off; with guard x = 2 and action T.) Th.-. following location diagram indicates a possible behavior: on off b I I I 0 3 40.3 1.39 2 2.2 3.783 Figme 9.11: A simple light. :;witd1. The trnnsir.iou system TS(S111ild1) ha:-; t.lie state space S = {(o.fT,t}If. E ll~~o} u {(011.t, t E IR~o} where t is a shorthaud for the dock ev.-1l11atio11,, with 11(.r) = t. U11cou11tably llH'\.11,Y t.rnusit.ions ema1rnte fron, t.he i11itialst at.e (off. O}. TS( Switch) h,1st l1e followi11g tra.11:;itions for reals cl nud f: (off. t) ~ (off J + d) for all t ~ 0 aud d ~ 0 :,wttr.h_,.,u(off. I) (01,.0) for all t ~ 0 d(on, t) -. (on, t + d) for all t ~ 0 and d ~ 0 with t -rl ~ 2 <rr.tll./,_l)lT(on.t) 1 (off, t) for all 1 ~ (.:::; 2. The set of reacluhle stat.<!Sill TS( Switr.h) fron1 state (o.ff',0) is {(ojJ,t) I/ E IR~o} U {(on.I) IO:::;/.:::;2} n:-; the locatio11 invariant, :c ~ 2 is violated ill any stale (on, t) with f. > 2. A prefix of an exa.lllple pntl1 of TS(Switch) is (off, 0) ~ {ofT, 0.57) switch oa. (on, 0) A (on, v'2) ...!Ll..; h 011(on, v'2+0.2) s"•itch_nJJ (off. /2+0.2) -~witr.-(on.O) ~ (on, 1.7) ... ■ Run0-1k .9.J.'l. PmnllP[ Com.po.-;·1t1011 For tillH'd autu111ctla\\'t> have np to isomorphism. This is due to the fact that Ti\ 1 and TA2 do uot have auy shared variables. Synchrouizat.ion over time passage actious reflects Lhe nalural fact that time proceeds equally fast in both cornpo11e11ts. ■ Timed Automata The paths in TS(TA) are discrete representations of the continuous-time "behavior" of TA. They indicate at least the states immediately before an<l after the execution of an action a, E Act. However, due to the fact that. e.g .. interval delays may be realized in uncountably many ways, different paths may describe the same behavior (i.e., location diagram). Consider, e.g., the behavior of the light switch of Example 9.12 where the light alternates between off and on while being off for exactly one time unit and on for two time units, i.e., a return to ofJtakes place after exactly three time units. The following three example paths correspond to this contimwus-tim<> behavior: r.1 = (o/J,O) (off, 1, (on.O) (on, 2) (off, 2) rr2 = (off, 0) (off, 0.5) (o/J, l) (on, 0) (on. l} (on,2) {o/J,2) 1T3 = (o/J,O) (off,0.J) (o.ff. l) (on,O) (on,O.fi:3) (on, 1.:3) (on. 2) (off, 2) The only difference between these paths is the delay transitions. In path 1r1, the one time unit residence in the initial state (off, 0) is realized by means of the delay transitiou (ofl,O) -1....,(off, I). In contrast, the paths 1r2 and 7ra realize this single time urrit by two delay transitions: 05 05(off,O) • (off,0.5) • (off, 1) and (off,0) ~ (off,0.1) 0•9 (off, 1). But the effect of the transition (e, ·ry) di +d2 1 (e,'tJ+d1+d 2) corresponds to the effect of the sequence of transitions: In both cases, d1+d2 time units pass without executing an action o E Act. Thereby, 1mcountably many states of the form (e,11+t) with O ~ t ~ d1+(h are passed through. Remark 9.14-Multiple Actions in Zero Time The elapse of time in timed automata only takes place in locations. Actions o E Act take place instantaneously, i.e., they have a duration of zero time units. As a result, at a single time instant, several actions take place. ■ 9.1.2 Time Divergence, Timelock, and Zenoness The semantics of a timed automaton is given by a transition system with uncountably many states (and transitions). Paths through this transition system correspond to possible behaviors of the timed automatou. Howevn. not t>ver~-such path represents a realistic behavior. This subscctiou treats three <'ssential phcnomenn for timed automata: time divergeuC'e, timelo<'k. mad &cnoness. Time Divergence Cousider a location Csuch that for any t < d. for fixed constant d E Ilho-clock valuatiou 11+1.F Jnv(e). A possible ('xec-ution fragment stl'lrting from this location is where d; > 0 mad the infinite sequence d1 + cl2+ ... conV<'rges toward d. Snch inlinit<·' path fragments nr<.' called l.imP.-<:011-uf-rgent.A time-convergent path is countcriutuitivc as time advances only up to ,\ certain value whereas by nature time always progresses. For 0xarnple, tlw transition system of the l.imed automato11 for the light switda (:we Fig;ur<:> 0.11 on page G89) exhibits the ti111e-co11vcrgeut execnt:io11 fraga11eutwhich vbits infinitely many states in the interval [½,1]. Time ncwr proceeds beyoHd one. The corresponding path is time-convergent. As timc-co11vergt'nt paths are not realistic, they are not. co11sidcrcd. That is to say, the analysis of t.i11H•dautomata is focused on ti·mc-divergenl paths, i.e., paths in which tillle always progresses. In order to formally defi11e time-divergent. paths, kt ns first define tilt> elaps<:>d time of a. path. I11t11itively. the elapsed time of a patli is the total time that elapses along a path. The duration of a11 act.ion o-E Act is &ero; the duratio11 of a delay action d is d. Definition 9.15. Elapsed Time on a Path Let TA he a timed a11tornaton with the set Act of act.ions. The functio11 E:recTim<' Act U IR:;,o -+ IR~o is <lefined as 0 if TE ActExer: Time (T) -{ d ifT=dElR.:,o-For infi11ite exec11t.io11 fragme11t. p = so --214s1 --2:L;.s2 ... in TS(TA.) with Ti E Act U IR.>11 l<:>t E:r:ccTime (p) LX DcecTimP.(,, ). i=O The execution t,iane of finite execution fragments is defined analogously. For the path fragment" in TS(TA) iudnccd by p, Exf.<:Time(11) = Ex1:cTime(p). • Note that path fragment " may be induced by several execution fragments. However. every pair of execution fragments with the smne path fragment a.re only distinguished hy discrete transitions and not by delay transitions. Hence, E:i:ecTime(rr)is wcll-defiued. Definition 9.16. Time Divergence and Time Convergence The infinite path fragment ,. is time-divergent if E.1:ecTime(r.)= oo: otherwise, ,. b time-convergent. E:i:ample 9.17. Light Switch For the light switch described in Example 9.12 (page 688). the path ;r iu TS(Switch) in which on and off periods of 1 minute alternate: rr = (o/J,O) (ojJ, 1) (on.O} (on. l) {off, 1) (off. 2) (on,O) (on, 1) (off', 1) ... is tirne-diwrgent as ExecT-ime(rr)= l + 1 + 1 + ... = oc. The path rr' = (~/f,O) (off, 1/2) (off',3/4) (off. 7/8) (off, 15/16) ... in TS(Switch) is time-convergent, as Exec1'ime(1r') = I; (~)i+t = 1 < oo. Ill i=O Definition 9.18. Time-Dive1·gent Set of Paths For states in TS(TA) let: Pathsdiv(s) = { ;r E Paths(s) III is time-divergent }. !l That is, Pathsdi.u(s) denotes the set of timc-divergeut pat.hs iu TS(TA) that start in s. Although time-convergent paths are not realistic, their existence cannot be avoided. For the analysis of timed automata, time-convergent paths arc simply ignored, e.g., a timed ·•, automaton satisfies an invariaut when along all its time-divergent paths the invariant is satisfied. Timelock. Stat.f' s in TS(TA) contains a timelork if there is no time-divergent path starting in s. Such states are unrealistic as tim<' cannot progress for ever from these states. Timelocks ,u·0 considered as undesired and need to be avoided when mo<leling n time-critical system by means of a timed automato11. Definition 9.19. Timelock Let TA be a timed automaton. States in TS(TA) contains i:\ timelock if Path.sc1iv(-~)= 0. TA is timelock-free if no state in Reach(TS(TA)) contains a timelock. !!El (1/f .r < 2 nset(.r) Figmc 9.12: Timed a11to11rnton 8wi.tr-h1. figmc ~J.H: Ti,ued S-witc:h,1111:omal-O11 2. E.mmpl< !J.20. Modi/it'd f,igltt Switch We• modify th<• light swittli sud1 t,hat, t.lw light. is 011 for a period with dma.tiou t. E [l. 2), i.e .. th0 light is alwa..v:-;swit.chcd off wit.hiu 2 111i1111tcs;sec th(• timed a11t.ornato11Swit.ci,.1 in Figun· 9.12. T\1<· :-;t.ate {oo,2} ii-i read1able in tn.U1sitio11 systeu, TS(Swilchi), e.g., via tht' execution fraimeut: (ojJ,O) swil.ch-on. (on,0)-±.., (on, 2). As {on, 2) is a t.Nmiual sta.t.e, PFtthsdio((on.,2)) = 0, and the stitt-e <.:out.ains a timelock. Tirned c.llttomatuu Swilch.1b t.l11rn 11ot. t,i1uclock-frcc. J\uy terminal state of n t.rn11sit.io11system that results fru111 a t,imed a11to111atou ('Ontaius a timelock. Tt!rn1iuul states should not. be co11htsed ...,-iU1 t.cnuiunl locations, i.e .. loc.:atious I hat have no 011tgoiug edges. A terminal lurnt.io11 f. ,,·itlt ln-u(C) = lrnc. e.g .. does not result. in a terminal st.at<' i11 the m1<.l<•rl_vingt,rn.usit,iou system, as time 11iay progress i11f for ever. Termiual locations thus do not m•c·es.5,ll'ily yield states with timelocb. ?\lot only tcnui11al st.ate~ 1w1..,·cu11tai11 tim<'locks. Co11sider, e.g., anotht'r varic111t of the lip;ltl switch where hw( on) .,· < ;i. sec tirned a11lomatou Swilc:h:2ill Figlll'<-' 9.13. Tlw n•ad1ahlc stat.c {on: 2) is 11ol termiuHI. . e.g .. the tin1e-c:01n-ergeut path i11TS(Swit<·h.2): (on, 2) (on, 2.D) (on, 2.09) {011.. 2.99!.)' ou. 2.999!}) ... <'llHt1t.-1tcsfrom it .. However, A1thsdiu( (on, 2') -0 1:u, the stntc (on. 2) lii"\s no 011tgoiug discrete trausitions (as the guard I ::;;:i; < 2 is violated), aud time cannot. progress beyoud thn'<' (dnc t.o Inv(011.)= .c < 3). St.ate (on,2 1 in TS(Swit<'h2) coutnins a timelock. Tin1<'d a11tomatou Suritch.2is t.hns not t.i111elock-frec. ■ Zenoness As opposed t.o the pn'scncc of t.iit1e-co11vergent paths. timclocks arc considered as mod<•liug flaws that should be avoided. The latter also npplies to zeuone:;s. Rernll that the executiou of ac:t.iom; ct E A.ct is instautirneolts. i.e., actions take no time. Without further restrictious, a timed automaton may perfonu infinitely many actions in a fi11it0 time intervnl. This phenomeno11 is also called zeno and represents uomealizable behavior. since it would require infinitely fast processors. Definition 9.21. Zeno Paths Let. TA be n timed automatou. The iufinite path fragrnent ,. i11 TS('lt\) is .,;eno (or: n zeuu puth) if it b time-convergent mid iufinit0ly nw.ny actions o E A.cl are executed along 7i. [l Definition 9.22. Nonzenoness ~-':_i A timed <1uto11111tou'1:4.i:,; ,wn-zr>no if LherE'cloc>snot exist an initial ze110p,,th in TS(T.4.).' i'. Timed autonrntou TA is t:lrns uon-zcuo if aml ouly if for every path ;; in TS(TA), either 1i is tinw-divcrgcnt or 1T is ti1110-couverient with alrnost 01tly (i.e., nil exc<!pt.for fiuiteJ:yI t many) delay t.rn11sitio11s. ◄ti I Note that 11011-zenoness,as well as t.i111clock freedom, only refers to the n',r1.r:/wblcfrngme111' of the trarn;itio11 system TS(TA). A 11011-zcuotimC'd automaton may possess zeno path~ starting i11au 11nreadrnblc state. Similarly, a t.imclock-free timed automaton rnay contain 1111rcachable timelock states. 1 ·t I' E:,:ampfo 9.23. Zeno Po.ths of u Light Switch Consider yet another \'ariant of the light. switc-h, i11 which the 11ser has the possibilit.v to push the on but.ton while the light is 011. While doing so, clock .r is reset. awl tlw light stays 011 for at most two units, unless the 11sN pushes the on hut.ton ag,1in: sec: timed nutomaton Switch:.! in Figure 9.14. The paths induced by tlw following excc1.1tio11 fragments of TS(Switch:~) 0•23 .. ,,.•1t1-/,_,,n (o.f/', 0) (on, 0) o.;,: (on, 0.5) "'"'"'·"". (on, 0) (on, 0.25) are zeno path:-; duriug which t.he nser presses the 011 hnt.tou infinitely fast., or fm,t.cr and faster. resp('<tively. This unrealizn.hlc behavior ca11 ht' avoided by imposing a minimal non-zero delay, c, say. between s11ce0s:-;ivc butto11 pushiugs by the user. This is established by imposing Jiw(on) = :r: ~ 1 : switch_ofj' 1r.set(:1:) Figure 9.J:I: Timed a11tomat.uu Swit.ch:1. .1; ~ 100 : switch_off :;;,,: 1 : switch 011 resr I (.f) F'igure D.l::,: Ti111ed nutotnaton Switf'I,~. :i: ~ c for <: > 0. Note t.hat. r; should he ,\ 11al.11rnl 1111mh<!r. Iu order to mock! a. mi11i111.-\l respousc O < c < 1 where <; is rational, say c = bo,all time constrni11ts iu the timed1 a11t.omatou Swi.tch:1 11eedto he rcsc:alecl (s<ie Figure 9.15). Essentially. th<' tirned automaton Switch~ computes with a modifkd time unit.: one time 11nit for :,; iu Switch I correspo11ds I • LO Too lllllllltCS. ■ To check whether or not. a timed automaton is non-7,cno is algorit-hmicnlly difficult. lusLcad, sufficient condit.io11s are co11sidered that. are silllple to check, f:.g., by a static a11alysis of the timed imtomaton. The following <:riterio11 is hased on t.hc int.nitio11 that a timed a11to111aton i~ 11011-zeno if 011 any of it!-i cont.rot cycles, lime advc\11ces with at least some constant amount (larger thc:1117,cro). This yields: Lemma 9.24. Sufficient Criterion for Nonzenoness Let TA be a l.imrd automaton w-i.th:;el C of clod~5.mf'h thfLI for every r:ontml r:yde in TA Qn:f\11 .G·o . . . c: :,, f n will, to= ln. them e:1:istsa dock x E C such /.hat 1. :l: EC; for some O< i::;; n. and Tilllcd Aut<mwta 2. for all cluck cvalua/.ions 'I tfwre exist.,<· E N>o su<"h that 1J(x) < r, i.111plie:; (11 ~ .<J.1 01· 11111((1)). fur some O< j::;; 11. Then: TA i.c;non-zerw. Proof: Let. TA be a t.imed automaton over C with .r E C s,ttis(vi11g the t.wo co11straints stated in tht-daim aud i.j the ('Orresponding irn..lices. Ld ,r lw H path in TS(TA) t.hat. perfonns infinitely rnany acliom, <1 E Act. As Ti\ contai11s fiuit.f'ly 111,llly stntc·'S. "trawrscs so111e co11trol cyc:le fn <.......,.€'1 '-) ... <.......,.tn = l'o, Assn me that i ~ j. (t\s locat.iolls 011 ('yc·k,-:; can be re11umbered. tlib is not 11 restriction.) Cousidc•r tlw ]><1th frn~111cntiu TS(TA) that st.art.s nnd ('mis in location tn: B,r th<' conslrni11ts sarisficd by TA, dock :,: is resel 011 t.lt(' t.rnnsition f;_ 1 <-; l,. c111d the trn11sitio11 ei-l c........(_; is 1mly possible wheu 1/i-l (:r) ~ c (as for,,, 1(.r) < c. either I.ht• guard or t.hc locc1tio11 i11variant of C;arc violated). This implies that. hy tnwersi1ig th<• cycle fo '--, ... ~ fo time .:tdv1111ccswith at least c > 0 time units. I-le11ct•.r. b t:i111e-divcrge11l and TA b non-zeno. !Iii The condition in Lemma 9.24 is co111positio11f1l, i.c·!., if TA all(] TA' both satis(y tbC' constrnints, thell the para!l(~I <:(mtposed t-imc'd t111tornato11TA II TA' also satisfies tile co11strc1ints. This follows directly froui the fact tlwl a co11trol cycle in TA IITi\' consists of c1 control cycle i11'DL or TA', or both. If each ('Olltrol cycle in TA and i11 TA' salisfies the co11st.rai11t that t.i1ne slto11ld advance with al least some positive amount, tlae11 this thus ahm applies to each co11trol ('ydc iu TA '1~4'. Thb property sig11ifica11tly simplifies t.o checking whether n composite timed autolllaton is no11-ze110. In case a timed autotllctton is in Fact 11ntimecl (as no clocks are us<'d or all g11mds and iuvariants are vacuously trne), it. c<1n be collsidered as 11on-zc110, a11d th11s 11ot aft<,c-t the control cyd<:s of otl1er compo11e11t timed autornatn in a composite sysle111. E:r:ample fJ.25. Sufficient Condition for No11.zn1,011,css The timed auto111,1ton in Figure !l 1,3 (page G95) satisfies the constra.i11Ls i11 Lm1111w 9.2 1L In the control ('yclc off c........on '-<· of}', dock ;1; is reset on off ~ 0,1.. and the guard :1: ~ 100 ensmc:; that when goi11g fro111 location <~ffto on, tilllt-> has ad vc111ced with at least. 100 time units. On the control cycle on c........,on, dock :1: is reset, and the guard :i; ~ l ensures that nt least one tillle unit elapses 011 traversing this control cycle. The timed a11t01irnta Train., Gale. c111dController or Example 9.8 (page 683) all satisfy for any control cycle the coustraint:-; in Le11rn1a 9.24. Thi8 can be see11 as follows. Timed automaton Gaf(' has one control cycle: np ~ ... ~ up. In that. cydt>. dock T is reset when moving from local-ion down to goin._q_up.Furthermore. for q(.r) < 1. lo<.:ationuµ is uot reachable due t.o tht) guard :r ;,: 1 oil _qoing_v.p'-;. up. This ensures that on traversing the control cycle up .___.... .___.up, time advances with at least 01te time unit. The timed automaton Train contains the control cycle far<---.... <------;far. However, clock y is reset on that cycle before reaching location near. and the guard y > 2 on near ~ in guarantees that. on traversing th<' co11trol cycle at. least one (in fact, more than two) time unit has <'lapsed. For Controller, the resetti11g of clock z mid guard z=l ensure that also this ti111ecl automaton fulfills the constraints of Lemma 9.24. The timed automata Tm.in. Gale and Controller arc thus 11011-zeno. As the control cycles in the composed timed automaton (Train lJH,Gate) 1111Controller are comprised of tlw constituting timed automata, this2 composed timed autonrnton is 11011-zt>no. ■ The previous consiclerat.ions indicate that a timed auto1naton is adequately modt ... Jing a time-critical systt>111whenever it is 11011 zt>no and does tlot rnntain any timelock. Ti111t>lo<'·k free, non-zeno timed automata induce transit.ion systems without terminal states such that aloug any path only finitely many actions are executed in finite time. In contrast to zcno paths and timelocks, ti1ue-co11vergen1· paths will be trcat<'d akin to unfair paths (in fair CTL) and are explicitly excluded for analysis pmposes. A delay of d > 0 Lime units can he realized in different ways, in geuerid by n > 0 delay transitions of siZ<-'di through dn with di > 0 such that d = d 1+ ... +dn. As we are only iutere:-;ted in the amount of time aclvan<.:ing, a sequence of delay tran:-;itions labeled witlt dr through dn and a, sequence labeled with cl~through d~. say, such that. I::;~1 cl;= I:~'.:1 d~= d, are <.:om;idcrcd equivalent. and denoted by ~ . This relation is used later for defining the semautiu-; of timed CTL. Notation 9.26. Sets of Path Fragments L0t TA be a timed m1tomaton. For path fra.g1rn'nts in TS(TA) along which infinitely many action:-; arc performed, let denote the equivale11<.:f'class containing all infinite path fragments i11duced by t•xccution fragments in TS( TA) of the form ti 111~ ptti;.~;~s'~ '>f ti It)(: p(\$5.0g~ r,f ti me J).)SSagE' or rlo timP.•tntits ,/1 tin~~-unju <i'1 litn('-,mils where ki E W, di E IR~o and a, E Act 1 d1 ~ote iu thesuch that. I::}::, = d1 • that =;, notations. actions are abstracted away. • h I 1 .fi • f' do rli t: • f' . F or m 111te pat ragmeut rr E so===> s 1===> ... t 1at. per1orms 111uute y many actions, we have ExecTime(ri) = L;~0 d;. Path fragments in so~s1~ ... are time-div<>rgent if and only if Lid; diverges. Time-divergent path fragments that perform finitely many actions et E Act (but C'ontain infinitely rn<111ydelay transitious) an• represented in a similar way. except that after the execution of the last action er E Act the advance of time is represented by infinitely many l ===;, transitious. That is, the set do d 1 d,, -1 I 1 I .<Jo==>s1 ===> ... ==⇒ .511 ==;, s11+ l ==;,-s,,+2 ===;, ... co!ltains all infinite pa.th fragments induced by the execution fragment of the fon11 ti rue pa;;sa~c of lime J ►a&mgc C ► I iuflnitc ti111c passo.q:~.edo tim~-units d,1 -I time•U1\its do tl1Hence, so==> s1 ==⇒ ... is a uniform notation for all infinite time-divergent path fragments. ■ 9.2 Timed Computation Tree Logic Timed CTL (TCTL, for short) is a real-time variant of CTL aimed to express properties of timed automata. In TCTL, the until modality is equipped with a time interval such that <I>U ·' W asserts that a 'II-state is reached within l E J time units while only visiting <!>-stat.es before reaching the IJ/-state. The fa.ct that a deadlock may be reached within thirty time units via legal states only, say. can he expressed as legal U fo.:m] deadlock. where the atomic propositions legal and deadlock have their obvious meaning. Timed CTL is sufficiently expressive Lo allow for the formulation of an important. set of real-time system properties. Definition 9.27. Syntax of Timed CTL Formulae in TCTL are either state or path formulae. TCTL state formulae over the set AP of atomic propositions and set. C of clocks are formed according to the following grammar: <I>::= true I a. I g I <I>/\<I> -.<I>I 3~ I V_p 