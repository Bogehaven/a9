1 Introduction: The World of Real-Time Systems 1.1 WHAT ARE REAL-TIME SYSTEMS? Real-time systems ,u-e computer systems that monitor, respond to, or control au external environment. This environment is connected to tl1e (,'Ofllputer system through senson;, actuators. and other input-output interfaces. It may wnsisl of' physk,11 or biological objects of any fonn and structure. Often, humans are par1 of the connected extenial world, hut a wide range of other natural and artit1cial ohjcct~. as wcU as ,mimals, are also possible. The computer system must meet various timing and other constraints that are i,nposed on it by the real-time behavior of the external world tu which it is interfaced. Hence comes the name real time. Another name for many of thes€' systems is reactice systems, because their primary purpose is to respond to or react to signals from th cir em~ronment. A real-time computer system may be a component of a larger system in which ii is embedded; reasonably. such a computer component is called an <'mbedded system. Applications and examples of real-time systems are ubi4u.itous ,md proliferating, appearing as part of our G-ommerdal, goveni, nent, military, medical, educational, and cultural infrastructures. Included <1re: • vehicle systems for automobiles, s11bways, aircraft. railways. and ships • traffic control for highways, air.;pace, railway tracks, and shipping lanes • process control for power plants, chemical plants, and mnsumer products such as soft drinks and beer • medical systems fur radiation tberapy, patient monitoring, anrl defib,illation • military uses such as flring weapons, tracking, and command and t'untrol • manufactuling systems "~th robots Copyrighted Material 2 ► Chapter 1. Introduction: The World of Real-Time Systems • telephone, rndio, and satellite communications • computer games • multimedia systems that provide text. graphic, audio, and video interfaces • household systems for monitoring and controlling appliances • building ,nanagers that control such entities a~ heat, lights, doors, and elevators A simple example of a reactive system is a digital watch that responds to button presses for displaying and setting various times, stop"atchcs, and alarms. This is also obviously a real-time system because it must r<·spond to clock signals predictably and rapidly enough to display the time accurately. An automobile c-rnise control system is a good example of an embedded system. It regulates car ~-peed hy sensing the clrivf' axle rotations, speedometer. cruise control switch, and th•ottlc to control tlw bmke and throttle; it clearly has timing and otl1er constraints related to pcrfonnancc and safe!). 1.1.1 Real-Timeversus Conventional Software Computer hardware for real-time applications typically consists of a number of fairly standard component~ such as proci>ssors, memory units, buses, and peripherals, connected to some real-time input and output devices such as sensors and actuators. Our concern is mainly ,vith the software or programs running on this hardware. Real-tiine software differs significantly from conventional software in a number of ways. First is the dominant role of liming co11stroi11ts.A program ,nust not only produce the correct answer or ontput, but it must also compute the answer "on time." In other words, a program must be both logically and l!lmporallyC'Orred. More generally, realtime software must also satisfy timing assertions that involve relations over relative ,md absolute times. Tbc most common and simplest such assertion is a deadline-a limit 011 tl1e absolute or relative time whc>n a computation must complete. In a robot control system. for example, there may be a deadline or limit betwee11 the lime that a ,noving robot senses an obstruction in its path and the time that an actuator, such as a wheel controller, is activated to move the robot in a safer direction. A c111alitative distinction can be made between hare/and ~oft real-time ~ysterns. Hard real-time systems are those that, ,vithout exception, must meet l11eir ti1niJ1g constaints-if a constraint is violated, the system fails. At the other extreme are soft realtjme systems which can still be considered successful, that is, perform their mission, despite missing some constraints. There is a continuum between the extrernes of"hardness" and "sofh1ess," and most systems flt somewbere io between. For example. a very hard system might be one that controls the vertical motion of an elevator; missing a particular timiog constraint <:<midmean that tlw elevator stops between two noors, requiring emergency procedures to rescue the occupants. A very soft subsystem might beone that counts the number of vehicles per un.il of time entering a highway, and does this when l11e system has nol11ing else to do; by defl11ilioo, il can fail to complete a count. A communication system that OCC'asionallv loses messages (but informs the sender) !lts in the middle of the hard/soft spectrnm. Another example of a softer application is a telephone system that someti111es fails to make a eonnectiun; the sender just dials again. 1.1What Are Real-Time Systems? I 3 Most timing e<ln~iraints arP deterministic. that is, nonstatisticaL in nat11re. Deadlines and other assertions involving time are expressed in terms of exact or fixed values, rather than aggregate mea~ures such as averages. The reason. of course. is that failures to meet deterministic guamntPes often mean mission failures, especially for harder real-time systems. For example, a railway crossing gate on a road must always be dosed by the time a train reaches the crossing, not dosed ·'most of the time" or on tl1e average. These kinds of deterministic constraints can he contrasted with standard software performance and other timing measures which are usually treated a~ governed by some stochastic process. A seeond distinguishing feature of real-time systems is co11r111re11cy.Computer systems use (.'()ncurrency to improve performance. for example. by employing severnl processors nmning in parallel. Many systems also use <.,'<>ncurrency as a model to represent logically parallel activities, even though they may he implemented by interleaving the activities on a single processor. In addition to these reasons, real-time systems must also deal ,vith the inl1erent physical concurrency that i:, part of the external world to which they are connected. Signals from the environment can arrive simultaneously; physically disjoint and parallel activitiPS may be 111onitorecland controlled by a single computer system; it is often ne<.-essa,y to know the real time at which signals are received: and output signals may need to be emitted at approximat1·ly tlw same time due to timing constrai11ts. Systems clesign becomes especially <lifftcult when one combines the problems of concurrency ,vith tl1ose related to time. Tnan illuminating article on real-time programming. [Wi,th77] defined an informal hif'rarchy of program <.,'Omplexity:The first or lowest level of software complexity-the least <.-omplex-are sequential programs; next in complexity are multiprograms which create an illusion of parallelism by factoring out time (eliminating interrupts at the higher level). implementing logical parallelism typically via coroutines, and providing for synchronizatiou and resomce management; the higbest and most complex level are real-time programs whit'h include thP parallel features of multiprograms but are also execution-time clcrwndent. A third major characteristiC' of real-time systems is the emphasis 011 and signi6cance of t-eliabllitrJand fault tolerance. RC:'liahility is a measure of how often a syst<·m will fail. Altematively, to paraphrase [Levesonl;l.'5, p.172J, it is the probability that a system "~II perform C.'Orrcctlyover a given period of time. However, virhially no system is perfectly rehablc ancl failures must be expected. Fault tolerance is concerned with the recognition and handling of' failures. Errors anti failures can be ver)' costly. causing, for example, money losses, property damage. mlssion failnres, or loss of'human life. Conse<1nently, it is very importru1t to avoid failures if possible, through techniques for reliability, and to respond appropriately, gracefully, and with as little c,-ost as possible to failures that do occur (fault toleranc.-e). Systems or parts of systems can hP classified according to tl1eir criticality,which is a measure of the failure cost-the higher the c,-ost of failure, tl1e more critical the system. A very critical system ,vith high failure cost might control an aircraft or a nuclear power plant. Note tl1at criticality is a different dimension than hardness/softness. even tl1ough hardness and criticality often go together. as in the last examples. A computer game might still be a l1ard systerrr, even tl10ugh it is not a c·rilical one; if a c.-onstraint is not met, the game migbt fail but the failnre may be benign to the participiuit(s). 4 I Chapter 1. Introduction: The World of Real-Time Systems Most conventional computer systems are general purposP. They nm several applications at the same time, and the applications are often nn known to the system designers. Real-time systems, on the other hand. are often a7>plicn(um-specif)cand stand-alone. That i.s, all of the software, including the operating system,is tailor-made or adapted f'or the partknlar applir•atinn. While there are examples of completely automatic real-time systems, thP more common conflgurations and applications have one or more hu111m1swho interactively control and monitor the system behavior. The lumum-nu,chine i11teiface.\ueed to be designed cspedallycarefully in order to prevent human enors and confusion. A final difference between real-time and conventional programs relates to testingand certificntio11.Because of the high costs associated with failures, it is usually not feasible to test and debug systems with their actual complete environments. Jnste,1d, one must rely upon simulations, testing of subsystems, careful specifications, comprehensive ,malysis of designs, and extensive nm-time proccdmes for fault detection and handling. 1.1.2 A Comprehensive Example:Air Traffic Control Air traffic control systems (ATC)1 provide particularly good examples for a number of reasons. First, they are certainly ro1 important, widely known, and difficnlt application [Perry97], and there are many of thmn throughout the world. They also contain instan<.-esof all of the distinguishing features of real-time ~ysterns presented in the previous sc<.:tion.Finally, parts of them elln be ubstructcd to illustrate vm;ous technic·o.l idet1S. We <.-onsider the ATC network that monitors aircraft flying in the United States airspace. Figure 1.1 shows the basic control points in the U.S. air traffic control environment. The airspace is divided into volumes called secton1. If a plane is flying in a controlled airspace, there is an air trall1c controller, a person, responsible for that aircraft. As aircraft pass from one sector to auother, control of that aircraft passes from one c.-ontroller to another. Tlw sectors near airports are called Termi11al Radar Appmach Control (TRACON) sectors; here, the air trafl1c controller direC'ts traffic to the tower for landi.ng. and away from the tower to Eu Route sectors after takeoff. The main goals of tJ,ese systems are safety, efficiency, and perfonna.n<.-e. We want to prevent eolJL5io11sall(] the occurrenc.-e of other hawrds. For thL5 purpose, air traffic controllers need to assure that adequate aircraft separation distances arc maintained; and that weather hazards, natural obstacles, mid restricted airspaces are avoided. Efficiency and performance goals include maximizing airspace capacity and airp01t throughput, minimizing aircraft delays, and minimizillg foel <.-onsumptio,1. At each iJ1dividual center, there may hE> a variety of computer workstations and servers. There are also many forms of communications .unong c.-omponents and between centers, Proposed changes in ATC include the ability for controllers to send flight plans directly from ground ATC to !light management systems on-board an aircraft. Radar ,vill be augmented by aircraft that can repo1t their position-detem1ined through communication with global positioning systems (GPS)-directly to ground control. 1\Ve usethe ;1bbr('via.tio11 unJmr1ruffkconlrolsysATC to m<'an ail' tl'affic control, air trafl:k· control ~)>stem. tems, relying on the con:f'xl to distinguish among the three possibilities. 1.1 What Are Real-Time Systems? • 5 ~CO'.'/  ~  ~  ~  -;:,  On•g1-oundcontn,1 -- -- On-ground-- I&I Control tower  ---- ctRadars  --Co1tt1ol to,'-'C'r11 C:on1puters  Cc)1llp11h:rs  Figure 1.1 Air tramc control systPms: Components and control points. A Simplil1ed ATC Consider the followiug simplified version of' an ATC fScallon&Nast87] as a more r.etailed exa,nple. The p11rpose of the system is to keep trnck of all aircraft ill a given three-dimensional airspace and to ensure that the aircraft maintain a minim11rn separation distanc,-e at all ti mes. Figtu-e l.2 shows the computer system and its external cn,~ronment. A rnclar tracks the position of each aircraft in the space. When an aircraft enters the space, its presenc~ is announced through a digital c-ommunications subsystem: on lef.ving the space, the computer system broadcasts a notit-e of its depatturc to neighhotirtg sites. The communications subsystem can also beused to co,nmw1icate directly with .u1 aircraft. A c,•cmsole with keyboard and graphics display interfaces to a human operator: it displays the track of each aircraft an<l responds to oper.,tor <.-ommands. Operator commands include ones to interrogate the status and descriptive data for an aircraft and to transmit messages to aircraft, for example. to change direction in order to avoid a collision. The radar can scan any portion of the airspace, given sp,K-e <.'OOrt~nates. If the radar detects an object at the c-ommanded position, it returns a ''hit." An aircraft is considered losl if the radar fails to produce a hit; in this case, the operator must hP notified and c-orrectivc action taken. The radar is also used to scan the space for unknO\vn objects and lost aircraft. 6 ► Chapter1.Introduction:The World of Real-nme Systems Depa1tures C".ommands Depart11res ComputerRa.ta, Comm1mic.atlons system Ohs•~rvat1ons Arrivals Coinman<.L5 i =r Figure 12 SimplifiedATC example. Some rea~onable timing constraints for handling the various <levic-es a,1d the emironment are: 1. The radar should track each plane in the space at a rate or at least ont' ohservation every 10 second~ per plane. 2. The current position and track or each phne should be updated and displayed at least once every three seconds. 3. A response must be provided to an operator command within two seconds. Where do these constraints come from? The objectives are to give the oper.1tnrs suHlcienl time to understand the state or the airspace, to control the position of aircraft hy sending messages to them, and to respond qukkly to unusual or emergency situations, involvir,g, for example, potential collisions or overload~. The informally defined global objectives are translated into the above more detailed and precise constraints. Note also the inherent parallelism in the environment monitored by the computer. Radar observations, new arrival~. and operator commands can arrive independently and simultmieously. Similarly, the output sign,11s, radar. display. and departure$. ar<> lo~cally concurrent. • An ;1utmnatic teller machine that dispenses c-ash lo► EXERCISES1.1 credit card and hank customers. 1. \•\~Jich of the follo\\ong computer systems are real• An elevator system that responds to patmn request~ time ,ystems? Justify your answer in terms of the characinside and outside an elevator, t'Ontrollini; the elevator teristics described in the text. and door operations. 